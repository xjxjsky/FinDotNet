name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build-and-test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'  # 根据你的项目使用的 .NET 版本

      - name: Restore dependencies
        working-directory: ./api  # 替换为后端项目的路径
        run: dotnet restore

      - name: Build backend
        working-directory: ./api
        run: dotnet build --configuration Release --no-restore

      - name: Run backend tests
        working-directory: ./api
        run: dotnet test --no-build --verbosity normal

      - name: Publish backend
        working-directory: ./api
        run: dotnet publish --configuration Release --output ./publish

      - name: Upload backend artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend
          path: ./api/publish

  deploy-backend:
    needs: build-and-test-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download backend artifact
        uses: actions/download-artifact@v3
        with:
          name: backend
          path: ./publish

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: findotnet-backend  # 替换为你的后端 App Service 名称
          slot-name: production         # 直接部署到生产槽
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}  # 使用发布配置文件

  build-and-test-frontend:
    runs-on: ubuntu-latest
    env:
      CI: false  # 设置环境变量以忽略 CI 中的警告错误, 让前端 build 通过
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'  # 根据你的项目使用的 Node.js 版本

      - name: Install dependencies
        working-directory: ./frontend  # 替换为前端项目的路径
        run: npm install

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --ci --reporters=default --coverage

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: List build output
        run: ls -al ./frontend/build  # 确保这里的路径正确 添加一个日志以列出构建输出

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: ./frontend/build   # 确保这里的路径是构建输出的路径

  deploy-frontend:
    needs: build-and-test-frontend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download frontend build artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend
          path: ./frontend/build  # 将构建产物下载到 frontend/build 目录

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}  # 使用默认的 GITHUB_TOKEN
          action: "upload"
          app_location: "frontend"        # 指向前端代码所在目录，不带斜杠
          output_location: "build"        # 指向构建输出目录
