using Microsoft.Extensions.Hosting;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System.Text;
using System.Threading;
using System.Threading.Tasks;


/*此类不用，仅供学习参考*/
public class RabbitMqConsumerService2 : IHostedService
{
    private IConnection _connection;
    private IModel _channel;

    public Task StartAsync(CancellationToken cancellationToken)
    {
        var factory = new ConnectionFactory() { Uri = new Uri("amqp://guest:guest@localhost:5672/") };
        _connection = factory.CreateConnection();
        _channel = _connection.CreateModel();

        // 声明队列
        _channel.QueueDeclare(queue: "alarmQueue",
                             durable: false,
                             exclusive: false,
                             autoDelete: false,
                             arguments: null);

        // 设置消费者
        var consumer = new EventingBasicConsumer(_channel);
        consumer.Received += (model, ea) =>
        {
            var body = ea.Body.ToArray();
            var message = Encoding.UTF8.GetString(body);
            Console.WriteLine($"Received message: {message}");
        };

        _channel.BasicConsume(queue: "alarmQueue",
                             autoAck: true,
                             consumer: consumer);

        return Task.CompletedTask;
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        _channel?.Close();
        _connection?.Close();
        return Task.CompletedTask;
    }
}

/*
这两个类 RabbitMqConsumerService 和 RabbitMqConsumerService2 的区别主要体现在它们的实现方式和使用的基础类上，具体如下：
1. 基础类的不同

    RabbitMqConsumerService 继承自 BackgroundService：
        BackgroundService 是 .NET 提供的一个基类，简化了 IHostedService 的实现。它通过覆盖 ExecuteAsync 方法来定义后台任务的执行逻辑，提供了默认的 StartAsync 和 StopAsync 实现。
        继承 BackgroundService 让你只需要关注核心逻辑（在 ExecuteAsync 中编写），不用自己实现 StartAsync 和 StopAsync。

    RabbitMqConsumerService2 实现了 IHostedService 接口：
        IHostedService 是一个通用的接口，要求你显式地实现 StartAsync 和 StopAsync 方法来定义服务的启动和停止逻辑。
        需要手动管理生命周期，编写更多的启动和停止代码。

2. 资源管理和生命周期

    RabbitMqConsumerService：
        通过 BackgroundService 继承的特性，它的生命周期管理更自动化，比如当应用停止时，BackgroundService 会处理必要的停止逻辑，确保后台任务被正确地终止。
        它使用 using 语句创建 RabbitMQ 连接和信道，这意味着一旦 ExecuteAsync 方法执行完毕，连接和信道就会被释放。然而，using 可能在长时间运行的服务中并不理想，因为 RabbitMQ 连接应该在整个服务生命周期中保持。

    RabbitMqConsumerService2：
        由于直接实现 IHostedService，它显式控制了 StartAsync 和 StopAsync 方法。
        StartAsync 方法会在应用启动时运行，并在服务的整个生命周期内保持连接和信道。StopAsync 方法会在应用停止时显式关闭 RabbitMQ 连接和信道。
        这种方式更适合长时间运行的消费者，因为 RabbitMQ 连接和信道是服务运行期间一直保持的。

3. 日志记录

    RabbitMqConsumerService：
        使用了依赖注入的 ILogger<RabbitMqConsumerService> 进行日志记录。在消费消息时，它通过 _logger.LogInformation 记录收到的消息，具有更好的日志管理和调试功能。
    RabbitMqConsumerService2：
        没有使用日志记录系统，而是直接使用 Console.WriteLine 打印收到的消息。虽然简单易用，但不适合生产环境，因为缺乏日志的灵活性和集成能力。

4. 使用场景

    RabbitMqConsumerService（继承自 BackgroundService）：
        适合需要依赖 ASP.NET Core 内置后台服务机制，且希望简化服务的启动和停止的场景。
        背景任务更适合与 ASP.NET Core 生命周期紧密集成的应用，且日志记录更适合生产环境。

    RabbitMqConsumerService2（实现 IHostedService）：
        适合需要明确控制服务启动和停止流程的场景。
        可以手动管理连接的生命周期，在较简单或不需要高度集成的应用中使用。

总结

    如果你希望更简洁的实现并利用 ASP.NET Core 提供的背景服务生命周期管理，RabbitMqConsumerService（继承自 BackgroundService）是更好的选择。
    如果你需要更灵活地控制服务的启动和停止逻辑，或想手动管理 RabbitMQ 连接和信道的生命周期，那么 RabbitMqConsumerService2 更适合。
    */